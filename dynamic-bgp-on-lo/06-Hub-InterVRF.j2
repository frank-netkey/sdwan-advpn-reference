{# 06-Hub-InterVRF.j2                                                         #}
{# Release: 7.6                                                               #}
{# Design flavor: Dynamic BGP on Loopback (unified, ADVPN 2.0 ready)          #}
{# -------------------------------------------------------------------------- #}
{# Disclaimer: Normally, this file is not supposed to be edited by users.     #}
{# -------------------------------------------------------------------------- #}

{% import '00-Project' as project with context %}

{% set multi_vrf = true if project.regions[region].vrfs|default([]) else false %}
{% set pe_vrf = project.pe_vrf|default(1) if multi_vrf else 0 %}
{% set vrf_leak_summary = project.vrf_leak_summary|default('10.200.255.0/24') %}

{# Options: project-wide defaults #}
{% set options = {
    'leak_npu_link': '',
    'force_cleanup': project.force_cleanup|default(false)
  }
%}
{# Options can be selectively overriden in profile #}
{% set _ = options.update(
      project.profiles[profile].options|default({})
   ) 
%}

{# Internet access: VRF Leak to PE #}
{% set pevrf_leak_intf = [] %}
{% set vrf_leak_intf = [] %}
{% set vrf_cleanup_list = [] %}

{# DEVDB_system_interface: look for old inter-VRF links to cleanup (FMG 7.4+) #}
{# Looking for interface names 'vrf<id>_leak0' #}
{% for i in DEVDB_system_interface|default() if i.name|replace('vrf','')|replace('_leak0','')|int %}
{{ vrf_cleanup_list.append(i.name|replace('vrf','')|replace('_leak0','')|int) or "" }}
{% endfor %}
{# Force cleanup based on region's VRF list (offline rendering - since DEVDB_system_interface is not available) #}
{% if options.force_cleanup %}
  {% for v in project.regions[region].vrfs|default([]) %}
  {{ (vrf_cleanup_list.append(v.id) if v.id not in vrf_cleanup_list) or "" }}
  {% endfor %}
{% endif %}

{# Creating inter-VRF links #}
{% for i in project.profiles[profile].interfaces if i.vrf is defined %}
{% if i.name is defined and i.allow_dia|default(false) %}
  {# Configure software vdom-link interface if model is VM #}
  {% if options.leak_npu_link == '' %}
  config system vdom-link
    edit "vrf{{ i.vrf }}_leak"
    next
  end
  config system interface
    edit "vrf{{ i.vrf }}_leak0"
      set type vdom-link
      set vrf {{ pe_vrf }}
      set vdom 'root'
      set ip {{ vrf_leak_summary|ipaddr((i.vrf * 2 + 1))|ipaddr('address') }}/31
      set allowaccess ping
    next
    edit "vrf{{ i.vrf }}_leak1"
      set type vdom-link
      set vrf {{ i.vrf }}
      set vdom 'root'
      set ip {{ vrf_leak_summary|ipaddr((i.vrf * 2))|ipaddr('address') }}/31
      set allowaccess ping
    next
  end
  {# Configure vlan interfaces on top of npu link if model is HW #}
  {% else %}
  config system interface
    edit "vrf{{ i.vrf }}_leak0"
      set type vlan
      set vlanid {{ 4000 + i.vrf }}
      set interface "{{options.leak_npu_link}}0"
      set vrf {{ pe_vrf }}
      set vdom 'root'
      set mode static
      set ip {{ vrf_leak_summary|ipaddr((i.vrf * 2 + 1))|ipaddr('address') }}/31
      set allowaccess ping
    next
    edit "vrf{{ i.vrf }}_leak1"
      set type vlan
      set vlanid {{ 4000 + i.vrf }}
      set interface "{{options.leak_npu_link}}1"
      set vrf {{ i.vrf }}
      set vdom 'root'
      set mode static
      set ip {{ vrf_leak_summary|ipaddr((i.vrf * 2))|ipaddr('address') }}/31
      set allowaccess ping
    next
  end
  {% endif %}

  {% if i.role == 'lan' %}
  {{  pevrf_leak_intf.append("vrf"~i.vrf~"_leak0") or "" }}
  {{  vrf_leak_intf.append("vrf"~i.vrf~"_leak1") or "" }}
  {% endif %}

  {# Add default route to pe_vrf for each vrf #}
  config router static
    edit {{ 4000 + i.vrf }}
      set gateway {{ vrf_leak_summary|ipaddr((i.vrf * 2 + 1))|ipaddr('address') }}
      set device vrf{{ i.vrf }}_leak1
    next
  end  

  {# Remove VRF ID from the cleanup list #}
  {{ (vrf_cleanup_list.remove(i.vrf) if i.vrf in vrf_cleanup_list) or "" }}

{% endif %}
{% endfor %}

{# Configure a zone for easier policy management of vrf leaking #}
{% if project.create_vrf_leak_zone|default(true) %}
config system zone
  edit "{{ project.pevrf_leak_zone|default('pevrf_leak_zone') }}"
    {{'un' if not pevrf_leak_intf}}set interface {{ pevrf_leak_intf|join(' ') }}
  next
  edit "{{ project.vrf_leak_zone|default('vrfs_leak_zone') }}"
    {{'un' if not vrf_leak_intf}}set interface {{ vrf_leak_intf|join(' ') }}
  next
end
{% endif %}

{# Cleanup: delete old VRF leaking config #}
{% for v in vrf_cleanup_list|unique %}
  config router static
    delete {{ 4000 + v }}
  end
  {% if options.leak_npu_link == '' %}
  config system vdom-link
    delete "vrf{{ v }}_leak"
  end
  {% else %}
  config system interface 
    delete "vrf{{ v }}_leak0"
    delete "vrf{{ v }}_leak1"
  end
  {% endif %}
{% endfor %}